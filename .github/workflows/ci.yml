name: CI - Build and Test
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 25 (EA)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'

      - name: Docker info
        run: docker info

      - name: Build with Maven
        run: mvn clean install -DskipTests


      - name: Build with Maven
        run: mvn -B -ntp -DskipTests package
      - name: Upload Jars
        uses: actions/upload-artifact@v4
        with:
          name: jars
          path: "target/*.jar"
          if-no-files-found: 'warn'

  unit-tests:
    name: Unit tests (Surefire)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'
      - name: Run unit tests
        run: mvn -B -ntp -DskipITs=true test
      - name: Test reports
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: "**/target/surefire-reports/*"
          if-no-files-found: 'warn'

  integration-tests:
    name: Integration tests (Failsafe + Testcontainers)
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'

      - name: Docker  info
        run: docker info

      - name: Run integration tests
        run: mvn -B -ntp -DskipTests=true verify

      - name: IT reports
        uses: actions/upload-artifact@v4
        with:
          name: failsafe-reports
          path: "**/target/failsafe-reports/*"
          if-no-files-found: 'warn'

  docker-build:
    permissions:
      contents: read
      packages: write
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build Jars
        uses: actions/download-artifact@v4
        with:
          name: jars
          path: target

      - name: Show current directory
        run: pwd

      - name: List files (top level)
        run: ls -al

      - name: List files recursively
        run: ls -R | head -n 200

      - name: Log in to GitHub Container Registery
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          SHA=$(git rev-parse --short HEAD)
          docker build -t $IMAGE:latest -t $IMAGE:$SHA -f Dockerfile .
          docker push $IMAGE:latest
          docker push $IMAGE:$SHA

